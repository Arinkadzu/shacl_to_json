import DatasetCore from '@rdfjs/dataset/DatasetCore.js';
import ext from 'rdf-dataset-ext';
import type * as Rdf from '@rdfjs/types';
import type { Environment } from '@rdfjs/environment/Environment.js';
import { FormatsFactory } from '@rdfjs/formats/Factory.js';
import type { Prefixes } from '@zazuko/prefixes/prefixes';
import { MediaType } from '../formats.js';
type Rest<A extends unknown[]> = A extends [unknown, ...infer U] ? U : never;
interface SerializeArgs {
    format: MediaType;
    /**
     * Prefixes to be used in the serialization. Array values can be prefix known to `@zazuko/prefixes` or a custom prefix
     * pair
     */
    prefixes?: Array<keyof Prefixes | [string, string]>;
}
export interface Dataset extends Rdf.DatasetCore {
    addAll(...[quads]: Rest<Parameters<typeof ext.addAll>>): Dataset;
    deleteMatches(...args: Rest<Parameters<typeof ext.deleteMatch>>): Dataset;
    equals(...[other]: Rest<Parameters<typeof ext.equals>>): boolean;
    import(...[stream]: Rest<Parameters<typeof ext.fromStream>>): Promise<Dataset>;
    filter(filter: (quad: Rdf.Quad, dataset: Dataset) => boolean): Dataset;
    map(callback: (quad: Rdf.Quad, dataset: Dataset) => Rdf.Quad): Dataset;
    forEach(callback: (quad: Rdf.Quad, dataset: Dataset) => void): void;
    match(...args: Parameters<DatasetCore['match']>): Dataset;
    merge(...[other]: Rest<Parameters<typeof ext.addAll>>): Dataset;
    merge(...[other]: Rest<Parameters<typeof ext.addAll>>): Dataset;
    toCanonical(): string;
    toStream(): ReturnType<typeof ext.toStream>;
    /**
     * Returns the contents of this dataset in the selected RDF serialization.
     * This requires that the environment includes an appropriate serializer.
     * If it is not found, canonical n-quads are returned
     */
    serialize(args: SerializeArgs): Promise<string>;
}
export interface DatasetCtor {
    new (quads?: Rdf.Quad[]): Dataset;
}
export declare function createConstructor(env: Environment<FormatsFactory>): DatasetCtor;
export {};
//# sourceMappingURL=Dataset.d.ts.map