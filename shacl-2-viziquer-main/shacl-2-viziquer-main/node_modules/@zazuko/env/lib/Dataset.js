import DatasetCore from '@rdfjs/dataset/DatasetCore.js';
import ext from 'rdf-dataset-ext';
import getStream from 'get-stream';
import knownPrefixes from '@zazuko/prefixes';
export function createConstructor(env) {
    return class Dataset extends DatasetCore {
        addAll(...[quads]) {
            return ext.addAll(this, quads);
        }
        deleteMatches(...args) {
            return ext.deleteMatch(this, ...args);
        }
        equals(...[other]) {
            return ext.equals(this, other);
        }
        forEach(callback) {
            Array.from(this).forEach(quad => callback(quad, this));
        }
        import(...[stream]) {
            return ext.fromStream(this, stream);
        }
        filter(filter) {
            return new Dataset([...this].filter(quad => filter(quad, this)));
        }
        map(callback) {
            return new Dataset([...this].map(quad => callback(quad, this)));
        }
        match(...args) {
            return super.match(...args);
        }
        merge(...[other]) {
            return ext.addAll(new Dataset([...this]), other);
        }
        toCanonical() {
            return ext.toCanonical(this);
        }
        toStream() {
            return ext.toStream(this);
        }
        async serialize({ format, prefixes = [] }) {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const serializer = env.formats.serializers.get(format);
            if (!serializer) {
                return this.toCanonical();
            }
            return getStream(serializer.import(this.toStream(), {
                prefixes: prefixes.reduce((map, prefix) => {
                    if (Array.isArray(prefix)) {
                        return { ...map, [prefix[0]]: prefix[1] };
                    }
                    if (prefix in knownPrefixes) {
                        return { ...map, [prefix]: knownPrefixes[prefix] };
                    }
                    return map;
                }, {}),
            }));
        }
    };
}
